version: '3.7'
name: redpanda-cdc-postgres
volumes:
  redpanda: null
services:
  postgres:
    image: debezium/postgres:16
    container_name: postgres
    ports:
      - 5432:5432
    healthcheck:
      test: "pg_isready -U postgresuser -d pandashop"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=postgrespw
      - POSTGRES_DB=pandashop
      - PGPASSWORD=postgrespw
    configs:
      - source: init.postgres
        target: /docker-entrypoint-initdb.d/postgres_bootstrap.sql
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v${REDPANDA_VERSION:?Set a Redpanda version}
    container_name: redpanda
    command:
      - redpanda start
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    volumes:
      - redpanda:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
  debezium:
    image: debezium/connect:2.4
    container_name: debezium
    environment:
      BOOTSTRAP_SERVERS: redpanda:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
    depends_on: [postgres, redpanda]
    ports:
      - 8083:8083
configs:
  init.postgres:
    content: |
      -- Create the orders table
      create table orders (
          order_id serial primary key,
          customer_id int,
          total float,
          created_at timestamp default now()
      );

      -- Populate it with a few values
      insert into orders(customer_id, total) values (1,50);
      insert into orders(customer_id, total) values (2,100);
      insert into orders(customer_id, total) values (2,50);
      insert into orders(customer_id, total) values (3,10);
      insert into orders(customer_id, total) values (4,90);
